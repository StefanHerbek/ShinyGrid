dgamma(l4, a, b,log=T) + dgamma(l5, a, b,log=T) + dgamma(l6, a, b,log=T) +
dgamma(l7, a, b,log=T) + dgamma(l8, a, b,log=T) + dgamma(a,.001,.001,log=T) +
dgamma(b,.001,.001,log=T)
return(z)
}
s <- 5000
l1 <- rep(0,s)
l2 <- rep(0,s)
l3 <- rep(0,s)
l4 <- rep(0,s)
l5 <- rep(0,s)
l6 <- rep(0,s)
l7 <- rep(0,s)
l8 <- rep(0,s)
a <- rep(0,s)
b <- rep(0,s)
a[1] <- 1
b[1] <- 1
acc <- 0
a1 <- .001
a2 <- .001
b1 <- .001
b2 <- .001
for (i in 2:s) {
l1[i] <- rgamma(1,length(y[[1]])+a[i-1],sum(y[[1]]) + b[i-1])
l2[i] <- rgamma(1,length(y[[2]])+a[i-1],sum(y[[2]]) + b[i-1])
l3[i] <- rgamma(1,length(y[[3]])+a[i-1],sum(y[[3]]) + b[i-1])
l4[i] <- rgamma(1,length(y[[4]])+a[i-1],sum(y[[4]]) + b[i-1])
l5[i] <- rgamma(1,length(y[[5]])+a[i-1],sum(y[[5]]) + b[i-1])
l6[i] <- rgamma(1,length(y[[6]])+a[i-1],sum(y[[6]]) + b[i-1])
l7[i] <- rgamma(1,length(y[[7]])+a[i-1],sum(y[[7]]) + b[i-1])
l8[i] <- rgamma(1,length(y[[8]])+a[i-1],sum(y[[8]]) + b[i-1])
b[i] <- rgamma(1,8*a[i-1] + b1, l1[i]+l2[i]+l3[i]+l4[i]+l5[i]+l6[i]+l7[i]+l8[i] + b2)
#Sample from alpha
a[i] <- a[i-1]
astar <- rnorm(1,a[i-1],0.5)
if (astar > 0) {
lnew <- logPost(c(astar,b[i],l1[i],l2[i],l3[i],l4[i],l5[i],l6[i],l7[i],l8[i]),y)
lold <- logPost(c(a[i-1],b[i],l1[i],l2[i],l3[i],l4[i],l5[i],l6[i],l7[i],l8[i]),y)
if (lnew - lold > log(runif(1))) {
a[i] <- astar
acc <- acc + 1
}
}
}
print(acc/s)
plot(as.mcmc(a))
plot(as.mcmc(b))
plot(as.mcmc(l1))
plot(as.mcmc(l2))
plot(as.mcmc(l3))
plot(as.mcmc(l4))
plot(as.mcmc(l5))
plot(as.mcmc(l6))
plot(as.mcmc(l7))
plot(as.mcmc(l8))
library(coda)
library(LearnBayes)
# generate 50 random samples from expo(3) to use as testing data
y <- vector("list", 8)
for(i in 1:8){
y[[i]] <- rexp(50, 3)
}
logPost <- function(parm, data) {
a <- parm[1]
b <- parm[2]
l1 <- parm[3]
l2 <- parm[4]
l3 <- parm[5]
l4 <- parm[6]
l5 <- parm[7]
l6 <- parm[8]
l7 <- parm[9]
l8 <- parm[10]
#   z <- (50+a-1)*sum(log(l1)+log(l2)+log(l3)+log(l4)+log(l5)+log(l6)+log(l7)+log(l8)) -
#     b*sum(l1+l2+l3+l4+l5+l6+l7+l8) - l1*sum(as.numeric(data[[1]])) - l2*sum(as.numeric(data[[2]])) -
#     l3*sum(as.numeric(data[[3]])) - l4*sum(as.numeric(data[[4]])) -
#     l5*sum(as.numeric(data[[5]])) - l6*sum(as.numeric(data[[6]])) -
#     l7*sum(as.numeric(data[[7]])) - l8*sum(as.numeric(data[[8]])) +
#     dgamma(a,.001,.001,log=T) + dgamma(b,.001,.001,log=T)
z <- sum(dexp(data[[1]], l1, log = T)) + sum(dexp(data[[2]], l2, log = T)) +
sum(dexp(data[[3]], l3, log = T)) + sum(dexp(data[[4]], l4, log = T)) +
sum(dexp(data[[5]], l5, log = T)) + sum(dexp(data[[6]], l6, log = T)) +
sum(dexp(data[[7]], l7, log = T)) + sum(dexp(data[[8]], l8, log = T)) +
dgamma(l1, a, b,log=T) + dgamma(l2, a, b,log=T) + dgamma(l3, a, b,log=T) +
dgamma(l4, a, b,log=T) + dgamma(l5, a, b,log=T) + dgamma(l6, a, b,log=T) +
dgamma(l7, a, b,log=T) + dgamma(l8, a, b,log=T) + dgamma(a,.001,.001,log=T) +
dgamma(b,.001,.001,log=T)
return(z)
}
s <- 5000
l1 <- rep(0,s)
l2 <- rep(0,s)
l3 <- rep(0,s)
l4 <- rep(0,s)
l5 <- rep(0,s)
l6 <- rep(0,s)
l7 <- rep(0,s)
l8 <- rep(0,s)
a <- rep(0,s)
b <- rep(0,s)
a[1] <- 1
b[1] <- 1
acc <- 0
a1 <- .001
a2 <- .001
b1 <- .001
b2 <- .001
for (i in 2:s) {
l1[i] <- rgamma(1,length(y[[1]])+a[i-1],sum(y[[1]]) + b[i-1])
l2[i] <- rgamma(1,length(y[[2]])+a[i-1],sum(y[[2]]) + b[i-1])
l3[i] <- rgamma(1,length(y[[3]])+a[i-1],sum(y[[3]]) + b[i-1])
l4[i] <- rgamma(1,length(y[[4]])+a[i-1],sum(y[[4]]) + b[i-1])
l5[i] <- rgamma(1,length(y[[5]])+a[i-1],sum(y[[5]]) + b[i-1])
l6[i] <- rgamma(1,length(y[[6]])+a[i-1],sum(y[[6]]) + b[i-1])
l7[i] <- rgamma(1,length(y[[7]])+a[i-1],sum(y[[7]]) + b[i-1])
l8[i] <- rgamma(1,length(y[[8]])+a[i-1],sum(y[[8]]) + b[i-1])
b[i] <- rgamma(1,8*a[i-1] + b1, l1[i]+l2[i]+l3[i]+l4[i]+l5[i]+l6[i]+l7[i]+l8[i] + b2)
#Sample from alpha
a[i] <- a[i-1]
astar <- rnorm(1,a[i-1],0.5)
if (astar > 0) {
lnew <- logPost(c(astar,b[i],l1[i],l2[i],l3[i],l4[i],l5[i],l6[i],l7[i],l8[i]),y)
lold <- logPost(c(a[i-1],b[i],l1[i],l2[i],l3[i],l4[i],l5[i],l6[i],l7[i],l8[i]),y)
if (lnew - lold > log(runif(1))) {
a[i] <- astar
acc <- acc + 1
}
}
}
print(acc/s)
plot(as.mcmc(a))
plot(as.mcmc(b))
plot(as.mcmc(l1))
plot(as.mcmc(l2))
plot(as.mcmc(l3))
plot(as.mcmc(l4))
plot(as.mcmc(l5))
plot(as.mcmc(l6))
plot(as.mcmc(l7))
plot(as.mcmc(b))
logPost <- function(parm, data) {
a <- parm[1]
b <- parm[2]
l1 <- parm[3]
l2 <- parm[4]
l3 <- parm[5]
l4 <- parm[6]
l5 <- parm[7]
l6 <- parm[8]
l7 <- parm[9]
l8 <- parm[10]
#   z <- (50+a-1)*sum(log(l1)+log(l2)+log(l3)+log(l4)+log(l5)+log(l6)+log(l7)+log(l8)) -
#     b*sum(l1+l2+l3+l4+l5+l6+l7+l8) - l1*sum(as.numeric(data[[1]])) - l2*sum(as.numeric(data[[2]])) -
#     l3*sum(as.numeric(data[[3]])) - l4*sum(as.numeric(data[[4]])) -
#     l5*sum(as.numeric(data[[5]])) - l6*sum(as.numeric(data[[6]])) -
#     l7*sum(as.numeric(data[[7]])) - l8*sum(as.numeric(data[[8]])) +
#     dgamma(a,.001,.001,log=T) + dgamma(b,.001,.001,log=T)
z <- sum(dexp(data[[1]], l1, log = T)) + sum(dexp(data[[2]], l2, log = T)) +
sum(dexp(data[[3]], l3, log = T)) + sum(dexp(data[[4]], l4, log = T)) +
sum(dexp(data[[5]], l5, log = T)) + sum(dexp(data[[6]], l6, log = T)) +
sum(dexp(data[[7]], l7, log = T)) + sum(dexp(data[[8]], l8, log = T)) +
dgamma(l1, a, b,log=T) + dgamma(l2, a, b,log=T) + dgamma(l3, a, b,log=T) +
dgamma(l4, a, b,log=T) + dgamma(l5, a, b,log=T) + dgamma(l6, a, b,log=T) +
dgamma(l7, a, b,log=T) + dgamma(l8, a, b,log=T) + dgamma(a,.001,.001,log=T) +
dgamma(b,.001,.001,log=T)
return(z)
}
s <- 5000
l1 <- rep(0,s)
l2 <- rep(0,s)
l3 <- rep(0,s)
l4 <- rep(0,s)
l5 <- rep(0,s)
l6 <- rep(0,s)
l7 <- rep(0,s)
l8 <- rep(0,s)
a <- rep(0,s)
b <- rep(0,s)
a[1] <- 1
b[1] <- 1
acc <- 0
a1 <- .001
a2 <- .001
b1 <- .001
b2 <- .001
for (i in 2:s) {
l1[i] <- rgamma(1,length(y[[1]])+a[i-1],sum(y[[1]]) + b[i-1])
l2[i] <- rgamma(1,length(y[[2]])+a[i-1],sum(y[[2]]) + b[i-1])
l3[i] <- rgamma(1,length(y[[3]])+a[i-1],sum(y[[3]]) + b[i-1])
l4[i] <- rgamma(1,length(y[[4]])+a[i-1],sum(y[[4]]) + b[i-1])
l5[i] <- rgamma(1,length(y[[5]])+a[i-1],sum(y[[5]]) + b[i-1])
l6[i] <- rgamma(1,length(y[[6]])+a[i-1],sum(y[[6]]) + b[i-1])
l7[i] <- rgamma(1,length(y[[7]])+a[i-1],sum(y[[7]]) + b[i-1])
l8[i] <- rgamma(1,length(y[[8]])+a[i-1],sum(y[[8]]) + b[i-1])
b[i] <- rgamma(1,8*a[i-1] + b1, l1[i]+l2[i]+l3[i]+l4[i]+l5[i]+l6[i]+l7[i]+l8[i] + b2)
#Sample from alpha
a[i] <- a[i-1]
astar <- rnorm(1,a[i-1],1)
if (astar > 0) {
lnew <- logPost(c(astar,b[i],l1[i],l2[i],l3[i],l4[i],l5[i],l6[i],l7[i],l8[i]),y)
lold <- logPost(c(a[i-1],b[i],l1[i],l2[i],l3[i],l4[i],l5[i],l6[i],l7[i],l8[i]),y)
if (lnew - lold > log(runif(1))) {
a[i] <- astar
acc <- acc + 1
}
}
}
print(acc/s)
logPost <- function(parm, data) {
a <- parm[1]
b <- parm[2]
l1 <- parm[3]
l2 <- parm[4]
l3 <- parm[5]
l4 <- parm[6]
l5 <- parm[7]
l6 <- parm[8]
l7 <- parm[9]
l8 <- parm[10]
#   z <- (50+a-1)*sum(log(l1)+log(l2)+log(l3)+log(l4)+log(l5)+log(l6)+log(l7)+log(l8)) -
#     b*sum(l1+l2+l3+l4+l5+l6+l7+l8) - l1*sum(as.numeric(data[[1]])) - l2*sum(as.numeric(data[[2]])) -
#     l3*sum(as.numeric(data[[3]])) - l4*sum(as.numeric(data[[4]])) -
#     l5*sum(as.numeric(data[[5]])) - l6*sum(as.numeric(data[[6]])) -
#     l7*sum(as.numeric(data[[7]])) - l8*sum(as.numeric(data[[8]])) +
#     dgamma(a,.001,.001,log=T) + dgamma(b,.001,.001,log=T)
z <- sum(dexp(data[[1]], l1, log = T)) + sum(dexp(data[[2]], l2, log = T)) +
sum(dexp(data[[3]], l3, log = T)) + sum(dexp(data[[4]], l4, log = T)) +
sum(dexp(data[[5]], l5, log = T)) + sum(dexp(data[[6]], l6, log = T)) +
sum(dexp(data[[7]], l7, log = T)) + sum(dexp(data[[8]], l8, log = T)) +
dgamma(l1, a, b,log=T) + dgamma(l2, a, b,log=T) + dgamma(l3, a, b,log=T) +
dgamma(l4, a, b,log=T) + dgamma(l5, a, b,log=T) + dgamma(l6, a, b,log=T) +
dgamma(l7, a, b,log=T) + dgamma(l8, a, b,log=T) + dgamma(a,.001,.001,log=T) +
dgamma(b,.001,.001,log=T)
return(z)
}
s <- 5000
l1 <- rep(0,s)
l2 <- rep(0,s)
l3 <- rep(0,s)
l4 <- rep(0,s)
l5 <- rep(0,s)
l6 <- rep(0,s)
l7 <- rep(0,s)
l8 <- rep(0,s)
a <- rep(0,s)
b <- rep(0,s)
a[1] <- 1
b[1] <- 1
acc <- 0
a1 <- .001
a2 <- .001
b1 <- .001
b2 <- .001
for (i in 2:s) {
l1[i] <- rgamma(1,length(y[[1]])+a[i-1],sum(y[[1]]) + b[i-1])
l2[i] <- rgamma(1,length(y[[2]])+a[i-1],sum(y[[2]]) + b[i-1])
l3[i] <- rgamma(1,length(y[[3]])+a[i-1],sum(y[[3]]) + b[i-1])
l4[i] <- rgamma(1,length(y[[4]])+a[i-1],sum(y[[4]]) + b[i-1])
l5[i] <- rgamma(1,length(y[[5]])+a[i-1],sum(y[[5]]) + b[i-1])
l6[i] <- rgamma(1,length(y[[6]])+a[i-1],sum(y[[6]]) + b[i-1])
l7[i] <- rgamma(1,length(y[[7]])+a[i-1],sum(y[[7]]) + b[i-1])
l8[i] <- rgamma(1,length(y[[8]])+a[i-1],sum(y[[8]]) + b[i-1])
b[i] <- rgamma(1,8*a[i-1] + b1, l1[i]+l2[i]+l3[i]+l4[i]+l5[i]+l6[i]+l7[i]+l8[i] + b2)
#Sample from alpha
a[i] <- a[i-1]
astar <- rnorm(1,a[i-1],3)
if (astar > 0) {
lnew <- logPost(c(astar,b[i],l1[i],l2[i],l3[i],l4[i],l5[i],l6[i],l7[i],l8[i]),y)
lold <- logPost(c(a[i-1],b[i],l1[i],l2[i],l3[i],l4[i],l5[i],l6[i],l7[i],l8[i]),y)
if (lnew - lold > log(runif(1))) {
a[i] <- astar
acc <- acc + 1
}
}
}
print(acc/s)
plot(as.mcmc(a))
plot(as.mcmc(b))
logPost <- function(parm, data) {
a <- parm[1]
b <- parm[2]
l1 <- parm[3]
l2 <- parm[4]
l3 <- parm[5]
l4 <- parm[6]
l5 <- parm[7]
l6 <- parm[8]
l7 <- parm[9]
l8 <- parm[10]
#   z <- (50+a-1)*sum(log(l1)+log(l2)+log(l3)+log(l4)+log(l5)+log(l6)+log(l7)+log(l8)) -
#     b*sum(l1+l2+l3+l4+l5+l6+l7+l8) - l1*sum(as.numeric(data[[1]])) - l2*sum(as.numeric(data[[2]])) -
#     l3*sum(as.numeric(data[[3]])) - l4*sum(as.numeric(data[[4]])) -
#     l5*sum(as.numeric(data[[5]])) - l6*sum(as.numeric(data[[6]])) -
#     l7*sum(as.numeric(data[[7]])) - l8*sum(as.numeric(data[[8]])) +
#     dgamma(a,.001,.001,log=T) + dgamma(b,.001,.001,log=T)
z <- sum(dexp(data[[1]], l1, log = T)) + sum(dexp(data[[2]], l2, log = T)) +
sum(dexp(data[[3]], l3, log = T)) + sum(dexp(data[[4]], l4, log = T)) +
sum(dexp(data[[5]], l5, log = T)) + sum(dexp(data[[6]], l6, log = T)) +
sum(dexp(data[[7]], l7, log = T)) + sum(dexp(data[[8]], l8, log = T)) +
dgamma(l1, a, b,log=T) + dgamma(l2, a, b,log=T) + dgamma(l3, a, b,log=T) +
dgamma(l4, a, b,log=T) + dgamma(l5, a, b,log=T) + dgamma(l6, a, b,log=T) +
dgamma(l7, a, b,log=T) + dgamma(l8, a, b,log=T) + dgamma(a,.001,.001,log=T) +
dgamma(b,.001,.001,log=T)
return(z)
}
s <- 5000
l1 <- rep(0,s)
l2 <- rep(0,s)
l3 <- rep(0,s)
l4 <- rep(0,s)
l5 <- rep(0,s)
l6 <- rep(0,s)
l7 <- rep(0,s)
l8 <- rep(0,s)
a <- rep(0,s)
b <- rep(0,s)
a[1] <- 1
b[1] <- 1
acc <- 0
a1 <- .001
a2 <- .001
b1 <- .001
b2 <- .001
for (i in 2:s) {
l1[i] <- rgamma(1,length(y[[1]])+a[i-1],sum(y[[1]]) + b[i-1])
l2[i] <- rgamma(1,length(y[[2]])+a[i-1],sum(y[[2]]) + b[i-1])
l3[i] <- rgamma(1,length(y[[3]])+a[i-1],sum(y[[3]]) + b[i-1])
l4[i] <- rgamma(1,length(y[[4]])+a[i-1],sum(y[[4]]) + b[i-1])
l5[i] <- rgamma(1,length(y[[5]])+a[i-1],sum(y[[5]]) + b[i-1])
l6[i] <- rgamma(1,length(y[[6]])+a[i-1],sum(y[[6]]) + b[i-1])
l7[i] <- rgamma(1,length(y[[7]])+a[i-1],sum(y[[7]]) + b[i-1])
l8[i] <- rgamma(1,length(y[[8]])+a[i-1],sum(y[[8]]) + b[i-1])
b[i] <- rgamma(1,8*a[i-1] + b1, l1[i]+l2[i]+l3[i]+l4[i]+l5[i]+l6[i]+l7[i]+l8[i] + b2)
#Sample from alpha
a[i] <- a[i-1]
astar <- rnorm(1,a[i-1],5)
if (astar > 0) {
lnew <- logPost(c(astar,b[i],l1[i],l2[i],l3[i],l4[i],l5[i],l6[i],l7[i],l8[i]),y)
lold <- logPost(c(a[i-1],b[i],l1[i],l2[i],l3[i],l4[i],l5[i],l6[i],l7[i],l8[i]),y)
if (lnew - lold > log(runif(1))) {
a[i] <- astar
acc <- acc + 1
}
}
}
print(acc/s)
plot(as.mcmc(a))
plot(as.mcmc(b))
plot(as.mcmc(l1))
plot(as.mcmc(l2))
plot(as.mcmc(l3))
plot(as.mcmc(l4))
plot(as.mcmc(l5))
plot(as.mcmc(l6))
plot(as.mcmc(l7))
plot(as.mcmc(l8))
y[[2]] <- rexp(50, 8)
y[[4]] <- rexp(50, 1)
y[[6]] <- rexp(50, 6)
# want hierarchial model for one componet type
# Generally interested in uncertainty/distribution of failure rate parameter
#####################
# Top level
# Y's follow expo(m) with gamma(a,b) prior
# post follow gamma((a+n),(b+n*(m)))
#####################
# Lower level
# a and b follow gamma with noninformative gamma priors
# will need MCMC for this
#####################
logPost <- function(parm, data) {
a <- parm[1]
b <- parm[2]
l1 <- parm[3]
l2 <- parm[4]
l3 <- parm[5]
l4 <- parm[6]
l5 <- parm[7]
l6 <- parm[8]
l7 <- parm[9]
l8 <- parm[10]
#   z <- (50+a-1)*sum(log(l1)+log(l2)+log(l3)+log(l4)+log(l5)+log(l6)+log(l7)+log(l8)) -
#     b*sum(l1+l2+l3+l4+l5+l6+l7+l8) - l1*sum(as.numeric(data[[1]])) - l2*sum(as.numeric(data[[2]])) -
#     l3*sum(as.numeric(data[[3]])) - l4*sum(as.numeric(data[[4]])) -
#     l5*sum(as.numeric(data[[5]])) - l6*sum(as.numeric(data[[6]])) -
#     l7*sum(as.numeric(data[[7]])) - l8*sum(as.numeric(data[[8]])) +
#     dgamma(a,.001,.001,log=T) + dgamma(b,.001,.001,log=T)
z <- sum(dexp(data[[1]], l1, log = T)) + sum(dexp(data[[2]], l2, log = T)) +
sum(dexp(data[[3]], l3, log = T)) + sum(dexp(data[[4]], l4, log = T)) +
sum(dexp(data[[5]], l5, log = T)) + sum(dexp(data[[6]], l6, log = T)) +
sum(dexp(data[[7]], l7, log = T)) + sum(dexp(data[[8]], l8, log = T)) +
dgamma(l1, a, b,log=T) + dgamma(l2, a, b,log=T) + dgamma(l3, a, b,log=T) +
dgamma(l4, a, b,log=T) + dgamma(l5, a, b,log=T) + dgamma(l6, a, b,log=T) +
dgamma(l7, a, b,log=T) + dgamma(l8, a, b,log=T) + dgamma(a,.001,.001,log=T) +
dgamma(b,.001,.001,log=T)
return(z)
}
s <- 5000
l1 <- rep(0,s)
l2 <- rep(0,s)
l3 <- rep(0,s)
l4 <- rep(0,s)
l5 <- rep(0,s)
l6 <- rep(0,s)
l7 <- rep(0,s)
l8 <- rep(0,s)
a <- rep(0,s)
b <- rep(0,s)
a[1] <- 1
b[1] <- 1
acc <- 0
a1 <- .001
a2 <- .001
b1 <- .001
b2 <- .001
for (i in 2:s) {
l1[i] <- rgamma(1,length(y[[1]])+a[i-1],sum(y[[1]]) + b[i-1])
l2[i] <- rgamma(1,length(y[[2]])+a[i-1],sum(y[[2]]) + b[i-1])
l3[i] <- rgamma(1,length(y[[3]])+a[i-1],sum(y[[3]]) + b[i-1])
l4[i] <- rgamma(1,length(y[[4]])+a[i-1],sum(y[[4]]) + b[i-1])
l5[i] <- rgamma(1,length(y[[5]])+a[i-1],sum(y[[5]]) + b[i-1])
l6[i] <- rgamma(1,length(y[[6]])+a[i-1],sum(y[[6]]) + b[i-1])
l7[i] <- rgamma(1,length(y[[7]])+a[i-1],sum(y[[7]]) + b[i-1])
l8[i] <- rgamma(1,length(y[[8]])+a[i-1],sum(y[[8]]) + b[i-1])
b[i] <- rgamma(1,8*a[i-1] + b1, l1[i]+l2[i]+l3[i]+l4[i]+l5[i]+l6[i]+l7[i]+l8[i] + b2)
#Sample from alpha
a[i] <- a[i-1]
astar <- rnorm(1,a[i-1],5)
if (astar > 0) {
lnew <- logPost(c(astar,b[i],l1[i],l2[i],l3[i],l4[i],l5[i],l6[i],l7[i],l8[i]),y)
lold <- logPost(c(a[i-1],b[i],l1[i],l2[i],l3[i],l4[i],l5[i],l6[i],l7[i],l8[i]),y)
if (lnew - lold > log(runif(1))) {
a[i] <- astar
acc <- acc + 1
}
}
}
print(acc/s)
plot(as.mcmc(a))
s <- 5000
l1 <- rep(0,s)
l2 <- rep(0,s)
l3 <- rep(0,s)
l4 <- rep(0,s)
l5 <- rep(0,s)
l6 <- rep(0,s)
l7 <- rep(0,s)
l8 <- rep(0,s)
a <- rep(0,s)
b <- rep(0,s)
a[1] <- 1
b[1] <- 1
acc <- 0
a1 <- .001
a2 <- .001
b1 <- .001
b2 <- .001
for (i in 2:s) {
l1[i] <- rgamma(1,length(y[[1]])+a[i-1],sum(y[[1]]) + b[i-1])
l2[i] <- rgamma(1,length(y[[2]])+a[i-1],sum(y[[2]]) + b[i-1])
l3[i] <- rgamma(1,length(y[[3]])+a[i-1],sum(y[[3]]) + b[i-1])
l4[i] <- rgamma(1,length(y[[4]])+a[i-1],sum(y[[4]]) + b[i-1])
l5[i] <- rgamma(1,length(y[[5]])+a[i-1],sum(y[[5]]) + b[i-1])
l6[i] <- rgamma(1,length(y[[6]])+a[i-1],sum(y[[6]]) + b[i-1])
l7[i] <- rgamma(1,length(y[[7]])+a[i-1],sum(y[[7]]) + b[i-1])
l8[i] <- rgamma(1,length(y[[8]])+a[i-1],sum(y[[8]]) + b[i-1])
b[i] <- rgamma(1,8*a[i-1] + b1, l1[i]+l2[i]+l3[i]+l4[i]+l5[i]+l6[i]+l7[i]+l8[i] + b2)
#Sample from alpha
a[i] <- a[i-1]
astar <- rnorm(1,a[i-1],1)
if (astar > 0) {
lnew <- logPost(c(astar,b[i],l1[i],l2[i],l3[i],l4[i],l5[i],l6[i],l7[i],l8[i]),y)
lold <- logPost(c(a[i-1],b[i],l1[i],l2[i],l3[i],l4[i],l5[i],l6[i],l7[i],l8[i]),y)
if (lnew - lold > log(runif(1))) {
a[i] <- astar
acc <- acc + 1
}
}
}
print(acc/s)
plot(as.mcmc(a))
plot(as.mcmc(b))
plot(as.mcmc(l1))
plot(as.mcmc(l2))
plot(as.mcmc(l3))
plot(as.mcmc(l4))
plot(as.mcmc(l5))
plot(as.mcmc(l6))
plot(as.mcmc(l7))
shiny::runApp('GitHub/ShinyGrid/GridWorld')
devtools::find_rtools(T)
shiny::runApp('GitHub/ShinyGrid/GridWorld')
runApp('GitHub/ShinyGrid/GridWorld')
devtools::find_rtools()
install.packages(Rcpp)
install.packages("Rcpp")
install.packages("Rcpp")
shiny::runApp('GitHub/ShinyGrid/GridWorld')
library(Rcpp)
install.packages("Rcpp")
shiny::runApp('GitHub/ShinyGrid/GridWorld')
shiny::runApp('GitHub/ShinyGrid/GridWorld')
shiny::runApp('GitHub/ShinyGrid/GridWorld')
.libPaths()
RInside
.RInside
install.packages("RInside")
shiny::runApp('GitHub/ShinyGrid/GridWorld')
install.packages("Rcpp")
setwd("~/GitHub/ShinyGrid/GridWorld")
shiny::runApp()
