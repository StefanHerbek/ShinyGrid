ggtitle("Map of Average Temperatures Celsius") +
geom_point(aes(color = avgtemp), size = 3, data = data) + scale_colour_gradient(low = "blue", high = "red")+
theme(plot.title = element_text(face = "bold", size = 20))
########################################
# part b
fit <- lm(data$avgtemp ~ data$lat + data$elev)
summary(fit)
# part c
lon.lat = data[,3:4]
distmat = rdist.earth( lon.lat )
brk = seq(0,max(distmat),by=50)
vg = vgram( data[,3:4], data$avgtemp, lon.lat=TRUE,breaks = brk)
plot(vg,ylim = c(0 ,4))
vgr = vgram( data[,3:4], fit$residuals, lon.lat=TRUE,breaks = brk)
lines(vgr$vgram)
plot(vgr,ylim = c(0 ,1))
vg2 = variog(coords = data[,3:4], data = data$avgtemp )
plot(vg2, type = 'b')
vgr2 <- variog(coords = data[,3:4], data = fit$residuals)
lines(vgr2)
#######################################################
# part d
fit0 = likfit( coords = data[,3:4], data = data$avgtemp,
trend = ~data$lat + data$elev, ini.cov.pars = c(1,1),
cov.model = "pure.nugget",
lik.method = "ML", print.pars = TRUE )
fit0$parameters.summary
# part f
fit2 = likfit( coords = data[,3:4], data = data$avgtemp,
trend = ~data$lat + data$elev, ini.cov.pars = c(1,1),
fix.nugget = FALSE, nugget = 0.1,
fix.kappa = TRUE, kappa = 1/2, cov.model = "exponential",
lik.method = "ML", print.pars = TRUE )
fit2$parameters.summary
c(fit0$loglik,fit2$loglik)
c(fit0$loglik,fit2$loglik)-fit0$loglik
llr20 = -2*(fit2$loglik - fit0$loglik)
pchisq(llr20,3,lower.tail=FALSE)
library(lmtest)
lrtest(fit0, fit2)
p1 <- 47
p2 <- 257
# (lat, lon, elev) = (47, 3.8, 257)
# (51, 9.6, 461)
# (44.35, 10.6, 684)
# (52.3, 9.1, 59)
vg <- variog( coords = data[,3:4], data = data$avgtemp,
trend = ~data$lat + data$elev, cov.model = "exponential")
plot(vg, ylim=c(0, 200), col = "red", cex = 1.5)
vfit = variofit(vg, cov.model = "exponential")
covvec = vfit$nugget*(vg$u==0) + vfit$cov.pars[1]*exp(-vg$u/vfit$cov.pars[2])
distmat = rdist(data[,3:4])
vfit$cov.pars
?variofit
vfit = variofit(vg, ini.cov.pars = c(1,1),
fix.nugget = FALSE, nugget = 0.1,
fix.kappa = TRUE, kappa = 1/2, cov.model = "exponential",
lik.method = "ML", print.pars = TRUE )
vfit = variofit(vg, ini.cov.pars = c(1,1),
fix.nugget = FALSE, nugget = 0.1,
fix.kappa = TRUE, kappa = 1/2, cov.model = "exponential")
covvec = vfit$nugget*(vg$u==0) + vfit$cov.pars[1]*exp(-vg$u/vfit$cov.pars[2])
distmat = rdist(data[,3:4])
vfit$cov.pars
n = length(data$[,3])
a1 <- rep(1,n)
lon.lat = data[,3:4]
distmat = rdist.earth( lon.lat )
brk = seq(0,max(distmat),by=50)
vg = vgram( data[,3:4], data$avgtemp, lon.lat=TRUE,breaks = brk)
plot(vg,ylim = c(0 ,4))
vgr = vgram( data[,3:4], fit$residuals, lon.lat=TRUE,breaks = brk)
lines(vgr$vgram)
plot(vgr,ylim = c(0 ,1))
brk = seq(0,max(distmat),by=50)
vg = vgram( data[,3:4], data$avgtemp, lon.lat=TRUE,breaks = brk)
plot(vg,ylim = c(0 ,4))
lines(vgr$vgram)
vg2 = variog(coords = data[,3:4], data = data$avgtemp )
plot(vg2, type = 'b')
vgr2 <- variog(coords = data[,3:4], data = fit$residuals)
lines(vgr2)
lines(vgr2, type = o)
lines(vgr2, type = "l")
vg2 = variog(coords = data[,3:4], data = data$avgtemp )
plot(vg2, type = 'b')
vgr2 <- variog(coords = data[,3:4], data = fit$residuals)
lines(vgr2, type = "l")
legend("bottom right",c("Temperature", "Residuals"),
type = c("b", "l"))
?legend
legend("bottom right",c("Temperature", "Residuals"), lty = c("b", "l"))
legend("bottomright",c("Temperature", "Residuals"), lty = c("b", "l"))
legend("bottomright",c("Temperature", "Residuals"), box.lty = c("b", "l"))
plot(vg2, type = 1)
vgr2 <- variog(coords = data[,3:4], data = fit$residuals)
lines(vgr2, type = 2)
legend("bottomright",c("Temperature", "Residuals"), lty = c(1, 2))
vg2 = variog(coords = data[,3:4], data = data$avgtemp )
plot(vg2, type = 1)
vgr2 <- variog(coords = data[,3:4], data = fit$residuals)
lines(vgr2, type = 2)
plot(vg2, type = c(1))
plot(vg2, lty =1)
plot(vg2, lty =2)
plot(vg2, type ='l')
lines(vgr2, type = 'd')
lines(vgr2, type = 'o')
lines(vgr2, type = 2)
?lines
lines(vgr2, lty = 2)
lines(vgr2, lty = 3)
vg2 = variog(coords = data[,3:4], data = data$avgtemp )
plot(vg2, type ='l')
vgr2 <- variog(coords = data[,3:4], data = fit$residuals)
lines(vgr2, lty = 3)
plot(vg2, type ='l')
vgr2 <- variog(coords = data[,3:4], data = fit$residuals)
lines(vgr2, lty = 2)
n = length(data$[,3])
a1 <- rep(1,n)
n = length(data[,3])
a1 <- rep(1,n)
A = cbind(a1,data$lat,data$elev)
Sigma = pars[1]*exp(-distmat/pars[2]) + pars[3]*diag(dim(distmat)[1])
betahat = solve(t(A) %*% solve(Sigma,A) , t(A) %*% solve(Sigma, ca20$data))
resids = ca20$data - A %*% betahat
sigmahat = as.numeric( sqrt( t(resids) %*% solve(Sigma,resids) / (n-3) ) )
vg <- variog( coords = data[,3:4], data = data$avgtemp,
trend = ~data$lat + data$elev, cov.model = "exponential")
plot(vg, ylim=c(0, 200), col = "red", cex = 1.5)
vfit = variofit(vg, ini.cov.pars = c(1,1),
fix.nugget = FALSE, nugget = 0.1,
fix.kappa = TRUE, kappa = 1/2, cov.model = "exponential")
covvec = vfit$nugget*(vg$u==0) + vfit$cov.pars[1]*exp(-vg$u/vfit$cov.pars[2])
distmat = rdist(data[,3:4])
vfit$cov.pars
n = length(data[,3])
a1 <- rep(1,n)
A = cbind(a1,data$lat,data$elev)
pars <- c(vfit$cov.pars, vfit$nugget)
Sigma = pars[1]*exp(-distmat/pars[2]) + pars[3]*diag(dim(distmat)[1])
betahat = solve(t(A) %*% solve(Sigma,A) , t(A) %*% solve(Sigma, ca20$data))
resids = ca20$data - A %*% betahat
sigmahat = as.numeric( sqrt( t(resids) %*% solve(Sigma,resids) / (n-3) ) )
pars <- c(vfit$cov.pars, vfit$nugget)
Sigma = pars[1]*exp(-distmat/pars[2]) + pars[3]*diag(dim(distmat)[1])
betahat = solve(t(A) %*% solve(Sigma,A) , t(A) %*% solve(Sigma, data$avgtemp))
resids = ca20$data - A %*% betahat
sigmahat = as.numeric( sqrt( t(resids) %*% solve(Sigma,resids) / (n-3) ) )
pars <- c(vfit$cov.pars, vfit$nugget)
Sigma = pars[1]*exp(-distmat/pars[2]) + pars[3]*diag(dim(distmat)[1])
betahat = solve(t(A) %*% solve(Sigma,A) , t(A) %*% solve(Sigma, data$avgtemp))
resids = data$avgtemp - A %*% betahat
sigmahat = as.numeric( sqrt( t(resids) %*% solve(Sigma,resids) / (n-3) ) )
?matrix
parlocsmissing =  matrix(data = c(47,3.8,51,9.6,44.35,10.6,52.3,9.1), nrow = 4, ncol = 2, byrow=T)
parlocsmissing
parlocs = data[,3:4]
parlocsmissing =  matrix(data = c(47,3.8,51,9.6,44.35,10.6,52.3,9.1), nrow = 4, ncol = 2, byrow=T)
pardata <- data$avgtemp
pardata = pardata - mean(pardata,na.rm=T)
colnames(parlocs) <- c("V1", "V2")
distmat = as.matrix( dist( rbind(parlocs,parlocsmissing),upper=T) )
nc <- rbind(parlocs,parlocsmissing)
inds1 = 1:n
inds2 = (n+1):(n+n2)
distmat = as.matrix( dist( rbind(parlocs,parlocsmissing),upper=T) )
lamda = 0.99
Sigma = 9*lamda^(distmat)
n2 = 4
inds1 = 1:n
inds2 = (n+1):(n+n2)
distmat = as.matrix( dist( rbind(parlocs,parlocsmissing),upper=T) )
lamda = 0.99
Sigma = 9*lamda^(distmat)
Sigma11 = Sigma[inds1,inds1]
Sigma12 = Sigma[inds1,inds2]
Sigma21 = Sigma[inds2,inds1]
Sigma22 = Sigma[inds2,inds2]
# Conditional Expectation of forecast
mu2 = Sigma21%*%solve(Sigma11,pardata)
new <- mu2+mean(ca20$data)
new
vg <- variog( coords = data[,3:4], data = data$avgtemp,
trend = ~data$lat + data$elev, cov.model = "exponential")
vfit = variofit(vg, ini.cov.pars = c(1,1),
fix.nugget = FALSE, nugget = 0.1,
fix.kappa = TRUE, kappa = 1/2, cov.model = "exponential")
vfit$cov.pars
covvec = vfit$nugget*(vg$u==0) + vfit$cov.pars[1]*exp(-vg$u/vfit$cov.pars[2])
distmat = rdist(data[,3:4])
n = length(data[,3])
pars <- c(vfit$cov.pars, vfit$nugget)
pars
new <- mu2+mean(data$avgtemp)
new
sig2 = Sigma22 - Sigma21%*%solve(Sigma11,Sigma12)
sig2
sig2[1,1]
sqrt(sig2[1,1])
sqrt(sig2[1,1])
sqrt(sig2[2,2])
sqrt(sig2[3,3])
sqrt(sig2[4,4])
new
rm(list = ls())
library(fields)
n = 20
lamda = 0.9
# create a covariance matrix Sigma
distmat = as.matrix(dist(1:n,upper=TRUE))
Sigma = lamda^(distmat)
# plot it
image.plot(1:n,1:n,Sigma[n:1,])
image.plot(1:n,1:n,Sigma[n:1,],col = heat.colors(64))
# compute its Cholesky decomposition
# Use Cholesky to simulate a vector with this covariance
cholSigma = t(chol(Sigma))
Z = rnorm(n,mean=0,sd=1)
Y = cholSigma%*%Z
plot(1:n,Y,type="o")
# create a covariance matrix Sigma for points at 1...n+1
n = 20
lamda = 0.9
distmat = as.matrix(dist(1:(n+1),upper=TRUE))
Sigma = lamda^(distmat)
Sigma11 = Sigma[1:n,1:n]
Sigma21 = Sigma[n+1,1:n]
Sigma12 = Sigma[1:n,n+1]
Sigma22 = Sigma[n+1,n+1]
# Simulation
cholSigma11 = t(chol(Sigma11))
Z = rnorm(n,mean=0,sd=1)
Y = cholSigma11%*%Z
# Conditional Expectation of forecast
mu2 = Sigma21%*%solve(Sigma11,Y)
# Conditional Variance of forecast
sig2 = Sigma22 - Sigma21%*%solve(Sigma11,Sigma12)
# plot the forecast with error bars
plot(c(1,n+1),c(-2.5,2.5),type="n")
lines(1:n,Y,type="o")
lines(n+1,mu2,type="p",col='magenta',pch=16)
lines(c(n+1,n+1),c(mu2-1*sqrt(sig2),mu2+1*sqrt(sig2)),type="l",col="magenta",lwd=4)
# prediction weights
plot(1:n,Sigma21 %*% solve(Sigma11))
# create a covariance matrix Sigma for points at 1...n+1
n = 60
alpha = 0.2
distmat = as.matrix(dist(1:(n+1),upper=TRUE))
Sigma = (1+alpha*distmat)*exp(-alpha*distmat)
inds1 = c(1:25,36:60) # observed times
inds2 = 26:35         # unobserved (missing) times
Sigma11 = Sigma[inds1,inds1]
Sigma21 = Sigma[inds2,inds1]
Sigma12 = Sigma[inds1,inds2]
Sigma22 = Sigma[inds2,inds2]
# Simulation
cholSigma11 = t(chol(Sigma11))
Z = rnorm(length(inds1),mean=0,sd=1)
Y1 = cholSigma11%*%Z
# Conditional Expectation of forecast
mu2 = Sigma21%*%solve(Sigma11,Y1)
# Conditional Variance of forecast
sig2 = Sigma22 - Sigma21%*%solve(Sigma11,Sigma12)
# do a conditional simulation (mean + error)
Y21 = mu2 + t(chol(sig2))%*%rnorm(length(inds2))
# plot the conditional simulation
plot(c(1,n),c(-2.5,2.5),type="n")
lines(inds1[1:25],Y1[1:25],type="o")
lines(inds1[26:50],Y1[26:50],type="o")
lines(inds2,Y21,type="o",col="magenta")
# plot the conditional simulation
plot(c(1,n),c(-2.5,2.5),type="n")
lines(inds1[1:25],Y1[1:25],type="o")
lines(inds1[26:50],Y1[26:50],type="o")
lines(inds2,Y21,type="o",col="magenta")
##
## Photosynthetically available radiation data
##
pardata = as.matrix(read.table('http://www4.stat.ncsu.edu/~guinness/ST590_2016/par_data.txt',header=F))
parlocs = read.table('http://www4.stat.ncsu.edu/~guinness/ST590_2016/par_locs.txt',header=F)
parlocsmissing = read.table('http://www4.stat.ncsu.edu/~guinness/ST590_2016/par_locs_missing.txt',header=F)
pardata = pardata - mean(pardata,na.rm=T)
n1 = dim(parlocs)[1]
n2 = dim(parlocsmissing)[1]
inds1 = 1:n1
inds2 = (n1+1):(n1+n2)
parimage = matrix(data = NA, nrow = 26, ncol = 41 )
for(j in 1:n1){
parimage[ parlocs[j,1],parlocs[j,2] ] = pardata[j]
}
image.plot(t(parimage))
# create a covariance matrix Sigma for points at 1...n+1
n = 60
alpha = 0.2
distmat = as.matrix(dist(1:(n+1),upper=TRUE))
Sigma = (1+alpha*distmat)*exp(-alpha*distmat)
inds1 = c(1:25,36:60) # observed times
inds2 = 26:35         # unobserved (missing) times
Sigma11 = Sigma[inds1,inds1]
Sigma21 = Sigma[inds2,inds1]
Sigma12 = Sigma[inds1,inds2]
Sigma22 = Sigma[inds2,inds2]
# Simulation
cholSigma11 = t(chol(Sigma11))
Z = rnorm(length(inds1),mean=0,sd=1)
Y1 = cholSigma11%*%Z
# Conditional Expectation of forecast
mu2 = Sigma21%*%solve(Sigma11,Y1)
# Conditional Variance of forecast
sig2 = Sigma22 - Sigma21%*%solve(Sigma11,Sigma12)
# do a conditional simulation (mean + error)
Y21 = mu2 + t(chol(sig2))%*%rnorm(length(inds2))
# plot the conditional simulation
plot(c(1,n),c(-2.5,2.5),type="n")
lines(inds1[1:25],Y1[1:25],type="o")
lines(inds1[26:50],Y1[26:50],type="o")
lines(inds2,Y21,type="o",col="magenta")
# Simulation
cholSigma11 = t(chol(Sigma11))
Z = rnorm(length(inds1),mean=0,sd=1)
Y1 = cholSigma11%*%Z
# Conditional Expectation of forecast
mu2 = Sigma21%*%solve(Sigma11,Y1)
# Conditional Variance of forecast
sig2 = Sigma22 - Sigma21%*%solve(Sigma11,Sigma12)
# do a conditional simulation (mean + error)
Y21 = mu2 + t(chol(sig2))%*%rnorm(length(inds2))
# plot the conditional simulation
plot(c(1,n),c(-2.5,2.5),type="n")
lines(inds1[1:25],Y1[1:25],type="o")
lines(inds1[26:50],Y1[26:50],type="o")
lines(inds2,Y21,type="o",col="magenta")
# do a conditional simulation (mean + error)
Y21 = mu2 + t(chol(sig2))%*%rnorm(length(inds2))
# plot the conditional simulation
plot(c(1,n),c(-2.5,2.5),type="n")
lines(inds1[1:25],Y1[1:25],type="o")
lines(inds1[26:50],Y1[26:50],type="o")
lines(inds2,Y21,type="o",col="magenta")
# do a conditional simulation (mean + error)
Y21 = mu2 + t(chol(sig2))%*%rnorm(length(inds2))
# plot the conditional simulation
plot(c(1,n),c(-2.5,2.5),type="n")
lines(inds1[1:25],Y1[1:25],type="o")
lines(inds1[26:50],Y1[26:50],type="o")
lines(inds2,Y21,type="o",col="magenta")
# do a conditional simulation (mean + error)
Y21 = mu2 + t(chol(sig2))%*%rnorm(length(inds2))
# plot the conditional simulation
plot(c(1,n),c(-2.5,2.5),type="n")
lines(inds1[1:25],Y1[1:25],type="o")
lines(inds1[26:50],Y1[26:50],type="o")
lines(inds2,Y21,type="o",col="magenta")
# do a conditional simulation (mean + error)
Y21 = mu2 + t(chol(sig2))%*%rnorm(length(inds2))
# plot the conditional simulation
plot(c(1,n),c(-2.5,2.5),type="n")
lines(inds1[1:25],Y1[1:25],type="o")
lines(inds1[26:50],Y1[26:50],type="o")
lines(inds2,Y21,type="o",col="magenta")
n = 20
lamda = 0.9
# create a covariance matrix Sigma
distmat = as.matrix(dist(1:n,upper=TRUE))
Sigma = lamda^(distmat)
# plot it
image.plot(1:n,1:n,Sigma[n:1,])
image.plot(1:n,1:n,Sigma[n:1,],col = heat.colors(64))
# compute its Cholesky decomposition
# Use Cholesky to simulate a vector with this covariance
cholSigma = t(chol(Sigma))
Z = rnorm(n,mean=0,sd=1)
Y = cholSigma%*%Z
plot(1:n,Y,type="o")
# create a covariance matrix Sigma for points at 1...n+1
n = 20
lamda = 0.9
distmat = as.matrix(dist(1:(n+1),upper=TRUE))
Sigma = lamda^(distmat)
Sigma11 = Sigma[1:n,1:n]
Sigma21 = Sigma[n+1,1:n]
Sigma12 = Sigma[1:n,n+1]
Sigma22 = Sigma[n+1,n+1]
# Simulation
cholSigma11 = t(chol(Sigma11))
Z = rnorm(n,mean=0,sd=1)
Y = cholSigma11%*%Z
# Conditional Expectation of forecast
mu2 = Sigma21%*%solve(Sigma11,Y)
# Conditional Variance of forecast
sig2 = Sigma22 - Sigma21%*%solve(Sigma11,Sigma12)
# plot the forecast with error bars
plot(c(1,n+1),c(-2.5,2.5),type="n")
lines(1:n,Y,type="o")
lines(n+1,mu2,type="p",col='magenta',pch=16)
lines(c(n+1,n+1),c(mu2-1*sqrt(sig2),mu2+1*sqrt(sig2)),type="l",col="magenta",lwd=4)
plot(1:n,Sigma21 %*% solve(Sigma11))
rm(list = ls())
n = 20
lamda = 0.9
# create a covariance matrix Sigma
distmat = as.matrix(dist(1:n,upper=TRUE))
Sigma = lamda^(distmat)
# plot it
image.plot(1:n,1:n,Sigma[n:1,])
image.plot(1:n,1:n,Sigma[n:1,],col = heat.colors(64))
# compute its Cholesky decomposition
# Use Cholesky to simulate a vector with this covariance
cholSigma = t(chol(Sigma))
Z = rnorm(n,mean=0,sd=1)
Y = cholSigma%*%Z
plot(1:n,Y,type="o")
rm(list = ls())
library(fields)
n = 20
lamda = 0.9
# create a covariance matrix Sigma
distmat = as.matrix(dist(1:n,upper=TRUE))
distmat
Sigma = lamda^(distmat)
Sigma
rm(list=ls())
library(spatstat)
library(ggplot2)
library(ggmap)
library(dplyr)
CD <- read.csv("C:/Users/gilman/Desktop/crimeT.csv", stringsAsFactors = F)
murder <- CD[which(CD$LCR == "11"),]
d <- as.Date(murder$Date, "%m/%d/%Y")
y <- format(d,'%Y')
ya <- as.numeric(y)
crimeT <- read.csv("C:/Users/gilman/Desktop/class work/crimeT.csv", stringsAsFactors=FALSE)
View(crimeT)
rm(list=ls())
library(spatstat)
library(ggplot2)
library(ggmap)
library(dplyr)
CD <- read.csv("C:/Users/gilman/Desktop/class work/crimeT.csv", stringsAsFactors=FALSE)
murder <- CD[which(CD$LCR == "11"),]
d <- as.Date(murder$Date, "%m/%d/%Y")
y <- format(d,'%Y')
ya <- as.numeric(y)
m <- cbind(murder,y,ya)
View(m)
xypp = ppp(murder$Lon,murder$Lat)
names(xypp)
xypp1 = ppp(x,y,c(0,1),c(0,1))  # same as xypp
# simulated data
x = runif(100)   # 100 random x coordinates
y = runif(100)   # 100 random y coordinates
# pp() converts the data in spatstat point pattern format
help(ppp)
xypp = ppp(x,y)
names(xypp)
xypp1 = ppp(x,y,c(0,1),c(0,1))  # same as xypp
xypp2 = ppp(x,y,window=owin(c(0,1),c(0,1)))  # same
xypp3 = ppp(x,y,window=owin(xrange=c(0,1),yrange=c(0,1)))  # same
plot(xypp1)
plot(xypp4) # this obviously has the wrong window
plot(xypp)
density(xypp)
plot(density(xypp))
points(xypp,pch=16)
plot(density(xypp,adjust=1/4))
points(xypp,pch=16)
plot(density(xypp,adjust=2))
points(xypp,pch=16)
# can also use the 'sigma' argument to select the bandwidth
plot(density(xypp,sigma=1/10))
points(xypp,pch=16)
plot(density(xypp,kernel="gaussian"))
points(xypp,pch=16)
plot(density(xypp,kernel="rectangular"))
points(xypp,pch=16)
plot(density(xypp,diggle=FALSE))
plot(density(xypp,diggle=TRUE))
fit1 <- ppm(xypp ~ 1)
exp(fit1$coef)
summary(fit1)
install.packages("devtools")
library(devtools)
install_github('arilamstein/choroplethrZip@v1.3.0')
library(choroplethrZip)
data(df_pop_zip)
# ec = east coast
ec_states = c("maine", "new hampshire", "massachusetts", "rhode island", "connecticut",
"new york", "new jersey", "delaware", "maryland",
"virginia", "north carolina", "south carolina", "georgia", "florida",
"pennsylvania", "district of columbia", "vermont", "west virginia")
zip_choropleth(df_pop_zip,
state_zoom = ec_states,
title      = "2012 ZCTA Population Estimates",
legend     = "Population") + coord_map()
rm(list=ls())
install.packages('ggplot2', dep = TRUE)
library(ggplot2)
library(scales)
library(ggmap)
library("ggplot2", lib.loc="~/R/win-library/3.2")
install_github("wch/ggplot2")
library(devtools)
install_github("wch/ggplot2")
detach("package:ggplot2", unload=TRUE)
library("ggplot2", lib.loc="~/R/win-library/3.2")
library(ggplot2)
install.packages('ggplot2')
?ggplot2
shiny::runApp('C:/Users/gilman/Desktop/Shiny/ExpoGamma')
setwd("C:/Users/gilman/Desktop/GW Walk Through")
